#!/bin/bash

# Configures USB gadgets, see: docs/usb-gadget-driver.md

# Exit on first error, Echo commands before executing them, by default to stderr, Treat undefined environment variables as errors.
set -exu

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
readonly SCRIPT_DIR
# shellcheck source=lib/usb-gadget.sh
source "${SCRIPT_DIR}/lib/usb-gadget.sh"

# load a config from /etc/default
[[ -e /etc/default/tinypilot ]] && . /etc/default/tinypilot

print_help() {
  cat << EOF
Usage: ${0##*/} [-h]
Init USB gadget.
  -h Display this help and exit.
EOF
}

# Adapted from https://github.com/girst/hardpass-sendHID/blob/master/README.md

start_gadget() {
cd "${USB_DEVICE_PATH}"
# Keyboard
mkdir -p "${USB_KEYBOARD_FUNCTIONS_DIR}"
echo 1 > "${USB_KEYBOARD_FUNCTIONS_DIR}/protocol" # Keyboard
echo 1 > "${USB_KEYBOARD_FUNCTIONS_DIR}/subclass" # Boot interface subclass
echo 8 > "${USB_KEYBOARD_FUNCTIONS_DIR}/report_length"
# Write the report descriptor
D=$(mktemp)

{
  echo -ne \\x05\\x01       # Usage Page (Generic Desktop Ctrls)
  echo -ne \\x09\\x06       # Usage (Keyboard)
  echo -ne \\xA1\\x01       # Collection (Application)
  echo -ne \\x05\\x08       #   Usage Page (LEDs)
  echo -ne \\x19\\x01       #   Usage Minimum (Num Lock)
  echo -ne \\x29\\x03       #   Usage Maximum (Scroll Lock)
  echo -ne \\x15\\x00       #   Logical Minimum (0)
  echo -ne \\x25\\x01       #   Logical Maximum (1)
  echo -ne \\x75\\x01       #   Report Size (1)
  echo -ne \\x95\\x03       #   Report Count (3)
  echo -ne \\x91\\x02       #   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\x09\\x4B       #   Usage (Generic Indicator)
  echo -ne \\x95\\x01       #   Report Count (1)
  echo -ne \\x91\\x02       #   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\x95\\x04       #   Report Count (4)
  echo -ne \\x91\\x01       #   Output (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  echo -ne \\x05\\x07       #   Usage Page (Kbrd/Keypad)
  echo -ne \\x19\\xE0       #   Usage Minimum (0xE0)
  echo -ne \\x29\\xE7       #   Usage Maximum (0xE7)
  echo -ne \\x95\\x08       #   Report Count (8)
  echo -ne \\x81\\x02       #   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x75\\x08       #   Report Size (8)
  echo -ne \\x95\\x01       #   Report Count (1)
  echo -ne \\x81\\x01       #   Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\x19\\x00       #   Usage Minimum (0x00)
  echo -ne \\x29\\x91       #   Usage Maximum (0x91)
  echo -ne \\x26\\xFF\\x00  #   Logical Maximum (255)
  echo -ne \\x95\\x06       #   Report Count (6)
  echo -ne \\x81\\x00       #   Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  echo -ne \\xC0            # End Collection
} > "$D"
cp "$D" "${USB_KEYBOARD_FUNCTIONS_DIR}/report_desc"
rm "$D"
# Enable pre-boot events (if the gadget driver supports it).
if [[ -f "${USB_KEYBOARD_FUNCTIONS_DIR}/no_out_endpoint" ]]; then
  echo 1 > "${USB_KEYBOARD_FUNCTIONS_DIR}/no_out_endpoint"
fi

# Mouse (Relative)
mkdir -p "$USB_MOUSE_REL_FUNCTIONS_DIR"
echo 0 > "${USB_MOUSE_REL_FUNCTIONS_DIR}/protocol"
echo 0 > "${USB_MOUSE_REL_FUNCTIONS_DIR}/subclass"
echo 7 > "${USB_MOUSE_REL_FUNCTIONS_DIR}/report_length"

# Write the report descriptor
D=$(mktemp)
{
echo -ne \\x05\\x01      # USAGE_PAGE (Generic Desktop)
echo -ne \\x09\\x02      # USAGE (Mouse)
echo -ne \\xA1\\x01      # COLLECTION (Application)
echo -ne \\x09\\x01      # USAGE (Pointer)
echo -ne \\xA1\\x00      # COLLECTION (Physical)
                          # 8 Buttons
echo -ne \\x05\\x09      #   USAGE_PAGE (Button)
echo -ne \\x19\\x01      #   USAGE_MINIMUM (Button 1)
echo -ne \\x29\\x08      #   USAGE_MAXIMUM (Button 8)
echo -ne \\x15\\x00      #   LOGICAL_MINIMUM (0)
echo -ne \\x25\\x01      #   LOGICAL_MAXIMUM (1)
echo -ne \\x95\\x08      #   REPORT_COUNT (8)
echo -ne \\x75\\x01      #   REPORT_SIZE (1)
echo -ne \\x81\\x02      #   INPUT (Data,Var,Abs)
                          # x,y relative movement
echo -ne \\x05\\x01      #   USAGE_PAGE (Generic Desktop)
echo -ne \\x09\\x30      #   USAGE (X)
echo -ne \\x09\\x31      #   USAGE (Y)
echo -ne \\x09\\x38      #   USAGE (vertical wheel)
echo -ne \\x15\\x80      #   LOGICAL_MINIMUM (-128)
echo -ne \\x25\\x7F #   LOGICAL_MAXIMUM (127)
echo -ne \\x75\\x08      #   REPORT_SIZE (8)
echo -ne \\x95\\x03      #   REPORT_COUNT (3)
echo -ne \\x81\\x06      #   INPUT (Data,Var,Rel)
                          # horizontal wheel
echo -ne \\x05\\x0c      #   USAGE_PAGE (Generic Desktop)
echo -ne \\x0A\\x02\\x38 #   USAGE (Consumer AC Pan)
echo -ne \\x15\\x80      #   LOGICAL_MINIMUM (-128)
echo -ne \\x25\\x7F      #   LOGICAL_MAXIMUM (127)
echo -ne \\x95\\x01      #   REPORT_COUNT (1)
echo -ne \\x75\\x08      #   REPORT_SIZE (8)
echo -ne \\x81\\x06      #   INPUT (Data,Var,Rel)
echo -ne \\xC0           # END_COLLECTION (Physical)
echo -ne \\xC0           # END_COLLECTION (Application)
} >> "$D"
cp "$D" "${USB_MOUSE_REL_FUNCTIONS_DIR}/report_desc"

# Mouse
mkdir -p "$USB_MOUSE_FUNCTIONS_DIR"
echo 0 > "${USB_MOUSE_FUNCTIONS_DIR}/protocol"
echo 0 > "${USB_MOUSE_FUNCTIONS_DIR}/subclass"
echo 7 > "${USB_MOUSE_FUNCTIONS_DIR}/report_length"
# Write the report descriptor
D=$(mktemp)
{
echo -ne \\x05\\x01      # USAGE_PAGE (Generic Desktop)
echo -ne \\x09\\x02      # USAGE (Mouse)
echo -ne \\xA1\\x01      # COLLECTION (Application)
echo -ne \\x09\\x01      # USAGE (Pointer)
echo -ne \\xA1\\x00      # COLLECTION (Physical)
                         #   8-buttons
echo -ne \\x05\\x09      #   USAGE_PAGE (Button)
echo -ne \\x19\\x01      #   USAGE_MINIMUM (Button 1)
echo -ne \\x29\\x08      #   USAGE_MAXIMUM (Button 8)
echo -ne \\x15\\x00      #   LOGICAL_MINIMUM (0)
echo -ne \\x25\\x01      #   LOGICAL_MAXIMUM (1)
echo -ne \\x95\\x08      #   REPORT_COUNT (8)
echo -ne \\x75\\x01      #   REPORT_SIZE (1)
echo -ne \\x81\\x02      #   INPUT (Data,Var,Abs)
                         #   x,y absolute coordinates
echo -ne \\x05\\x01      #   USAGE_PAGE (Generic Desktop)
echo -ne \\x09\\x30      #   USAGE (X)
echo -ne \\x09\\x31      #   USAGE (Y)
echo -ne \\x16\\x00\\x00 #   LOGICAL_MINIMUM (0)
echo -ne \\x26\\xFF\\x7F #   LOGICAL_MAXIMUM (32767)
echo -ne \\x75\\x10      #   REPORT_SIZE (16)
echo -ne \\x95\\x02      #   REPORT_COUNT (2)
echo -ne \\x81\\x02      #   INPUT (Data,Var,Abs)
                         #   vertical wheel
echo -ne \\x09\\x38      #   USAGE (wheel)
echo -ne \\x15\\x81      #   LOGICAL_MINIMUM (-127)
echo -ne \\x25\\x7F      #   LOGICAL_MAXIMUM (127)
echo -ne \\x95\\x01      #   REPORT_COUNT (1)
echo -ne \\x75\\x08      #   REPORT_SIZE (8)
echo -ne \\x81\\x06      #   INPUT (Data,Var,Rel)
                         #   horizontal wheel
echo -ne \\x05\\x0C      #   USAGE_PAGE (Consumer Devices)
echo -ne \\x0A\\x38\\x02 #   USAGE (AC Pan)
echo -ne \\x15\\x81      #   LOGICAL_MINIMUM (-127)
echo -ne \\x25\\x7F      #   LOGICAL_MAXIMUM (127)
echo -ne \\x95\\x01      #   REPORT_COUNT (1)
echo -ne \\x75\\x08      #   REPORT_SIZE (8)
echo -ne \\x81\\x06      #   INPUT (Data,Var,Rel)
echo -ne \\xC0           # END_COLLECTION (Physical)
echo -ne \\xC0           # END_COLLECTION (Application)
} > "$D"
cp "$D" "${USB_MOUSE_FUNCTIONS_DIR}/report_desc"
rm "$D"

ln -s "${USB_KEYBOARD_FUNCTIONS_DIR}" "${USB_CONFIG_DIR}/"
# MOUSE_MODE = absolute|relative|both - or not set or whatever. This is pretty
#   flexible here. Just be sure to exclude one of the mice if a single-mouse mode
#   is specified.
if [[ "${MOUSE_MODE:-}" != "relative" ]]; then
  ln -s "${USB_MOUSE_FUNCTIONS_DIR}" "${USB_CONFIG_DIR}/"
fi
if [[ "${MOUSE_MODE:-}" != "absolute" ]]; then
  ln -s "${USB_MOUSE_REL_FUNCTIONS_DIR}" "${USB_CONFIG_DIR}/"
fi
}

stop_gadget() {
  rm "${USB_DEVICE_PATH}/${USB_CONFIG_DIR}/${USB_MOUSE_REL_FUNCTIONS_DIR##*/}"
  rm "${USB_DEVICE_PATH}/${USB_CONFIG_DIR}/${USB_MOUSE_FUNCTIONS_DIR##*/}"
  rm "${USB_DEVICE_PATH}/${USB_CONFIG_DIR}/${USB_KEYBOARD_FUNCTIONS_DIR##*/}"
  rm "${USB_DEVICE_PATH}/${USB_MOUSE_FUNCTIONS_DIR}"
  rm "${USB_DEVICE_PATH}/${USB_KEYBOARD_FUNCTIONS_DIR}"
}

# Parse command-line argument.
case "${1}" in
    start)
      start_gadget
    ;;
    stop)
      stop_gadget
    ;;
    *)
      print_help >&2
      exit 1
    ;;
esac
